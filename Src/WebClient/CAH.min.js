function wouldYouStartTheFansPlease() { console.info('Entering wouldYouStartTheFansPlease'), self.IsPlayerValid(function (a) { console.info('Entering IsPlayerValid callBack'), a == null || a == '' ? (console.info("Doesn't look like it. Please join in."), $('#playerSubmit').click(addNewPlayer), $('#addNewPlayer').show()) : (console.info('Welcome back ' + a.Name + '.'), self.setPlayerDetails(a, !0)), console.info('Exiting IsPlayerValid callBack'); }), console.info('Exiting wouldYouStartTheFansPlease'); } function IsPlayerValid(b) { console.info('Entering IsPlayerValid'); var a = getCookie('playerId'); a != null && a.length > 0 ? (console.info('Go value from cookie: ' + a), $.ajax({ url: '../CahAPI/GameApi.svc/player/' + a, method: 'GET' }).done(function (a) { b(a); }).fail(function (c, a, b) { console.error('An error occurred calling api.'), console.error(a), console.error(b); })) : b(null), console.info('Exiting IsPlayerValid'); } function disableButton(a) { console.info('Entering disableButton'), a.removeClass('button').addClass('button-disabled'), a.unbind(), console.info('Exiting disableButton'); } function enableButton(a, b) { console.info('Entering wouldYouStartTheFansPlease'), a.removeClass('button-disabled').addClass('button'), a.click(b), console.info('Exiting wouldYouStartTheFansPlease'); } function addNewPlayer() { console.info('Entering addNewPlayer'); var a = $('#playerName').val(); console.info('Player name is: ' + a); var b = $('#playerSubmit'); disableButton(b), $.ajax({ url: '../CahAPI/GameApi.svc/player/add/' + a, method: 'PUT' }).done(function (a) { setPlayerDetails(a.AddPlayerResult, !1); }).fail(function (d, a, c) { console.error('An error occurred calling api.'), console.error(a), console.error(c), updateScoreboard(!1), enableButton(b, addNewPlayer); }), console.info('Exiting addNewPlayer'); } function setPlayerDetails(b, a) { console.info('Entering setPlayerDetails'), self.playerDetails = b, setCookie('playerId', self.playerDetails.Id, 1), $('#addNewPlayer').hide(), $('#submitCards').show(), !a && self.playerDetails.IsTsar ? drawBlackCard(function () { console.info('Entering SetPlayerDetails::DrawBlackCard::Callback'), updateScoreboard(waitUntilAllPlayersJoin, a), console.info('Exiting SetPlayerDetails::DrawBlackCard::Callback'); }) : getBlackCard(function () { console.info('Entering SetPlayerDetails::GetBlackCard::Callback'), updateScoreboard(waitUntilAllPlayersJoin, a), console.info('Exiting SetPlayerDetails::GetBlackCard::Callback'); }), console.info('Exiting setPlayerDetails'); } function waitUntilAllPlayersJoin(c, d) { if (console.info('Entering waitUntilAllPlayersJoin'), c.length < 3) { var a = 3 - c.length; var b = 'player'; a > 1 && (b += 's'), console.info('Waiting for ' + a + ' other ' + b + ' to join.'), setTimeout(function () { updateScoreboard(waitUntilAllPlayersJoin, d); }, 5000); } else waitForAllPlayedCards(); console.info('Exiting waitUntilAllPlayersJoin'); } function updateScoreboard(a, b) { console.info('Entering updateScoreboard'), $.ajax({ url: '../CahAPI/GameApi.svc/players/details', method: 'GET' }).done(function (c) { self.otherPlayers = c; var e = $('#scoreboard'); var d = '<u>Scoreboard:</u><br/><br/>'; for (i in c) { var f = c[i]; d = d + f.Points + ' - ' + f.Name + '<br/>'; } e.html(d), e.show(), a(c, b); }).fail(function (c, a, b) { console.error('An error occurred calling api.'), console.error(a), console.error(b); }), console.info('Exiting updateScoreboard'); } function drawBlackCard(a) { console.info('Entering drawBlackCard'), $.ajax({ url: '../CahAPI/GameApi.svc/cards/black/draw/' + self.playerDetails.Id, method: 'GET' }).done(function (b) { console.info('Got a black card'), setBlackCard(b), a != undefined && a(); }).fail(function (c, a, b) { console.error('An error occurred calling api.'), console.error(a), console.error(b); }), console.info('Exiting drawBlackCard'); } function getBlackCard(a) { console.info('Entering getBlackCard'), $.ajax({ url: '../CahAPI/GameApi.svc/cards/black/get', method: 'GET' }).done(function (b) { console.info('Got a black card'), setBlackCard(b), a != undefined && a(); }).fail(function (c, a, b) { console.error('An error occurred calling api.'), console.error(a), console.error(b); }), console.info('Exiting getBlackCard'); } function setBlackCard(b) { console.info('Entering setBlackCard'); var a = $('#blackCard'); a.html(b.Text), a.show(), self.pick = b.Pick, console.info('Exiting setBlackCard'); } function getWhiteCards() { console.info('Entering getWhiteCards'), self.playerDetails.IsTsar ? $('#tsar').show() : ($('#tsar').hide(), console.info('Getting white cards.'), $.ajax({ url: '../CahAPI/GameApi.svc/cards/white/' + self.playerDetails.Id, method: 'GET' }).done(function (d) { console.info('Got a white cards'), self.alreadyGotWhiteCardsThisRound = !0; for (i in d) { var a = parseInt(i); var e = '#whiteCard' + (a + 1); var b = $(e); var c = d[a]; b.html(c.Text), b.attr('tag', c.Id); } $('#whiteCards').show(); }).fail(function (c, a, b) { console.error('An error occurred calling api.'), console.error(a), console.error(b); })), console.info('Exiting getWhiteCards'); } function whiteCardClicked(g) { console.info('Entering whiteCardClicked'); var b = g.target; var k = b.id; var e = b.getAttribute('tag'); var f = $.inArray(e, self.selectedCards); if (f == -1) { var c = self.cardsPicked + 1; c <= self.pick && (self.selectedCards[self.cardsPicked] = e, b.innerHTML = b.innerHTML + '<div class="cardOrder"><div class="cardOrderNumber">' + c + '</div></div>', self.cardsPicked = c); } else { $(g.target).find('div').remove(); var a = f; while (a + 1 < self.selectedCards.length) self.selectedCards[a] = self.selectedCards[a + 1], a++; self.cardsPicked--; var h = self.selectedCards.length - self.cardsPicked; self.selectedCards.splice(self.cardsPicked, h); for (var a = 0; a < self.selectedCards.length; a++) { var i = self.selectedCards[a]; var j = '.whiteCard[tag=' + i + ']'; var l = $(j).find('div').find('div').html(a + 1); } } var d = $('#submitCards'); self.selectedCards.length == self.pick ? enableButton(d, submitCards) : disableButton(d), console.info('Exiting whiteCardClicked'); } function submitCards() { console.info('Entering submitCards'); var a = $('#submitCards'); disableButton(a); var b = { PlayerId: '', CardId: [] }; b.playerId = self.playerDetails.Id, b.cardId = self.selectedCards, $.ajax({ url: '../CahAPI/GameApi.svc/card/playCards', method: 'POST', contentType: 'application/json; charset=UTF-8; charset-uf8', data: JSON.stringify(b) }).done(function (b) { self.cardsPicked = 0, self.selectedCards = new Array(), disableButton(a), console.info('Submitted Cards'), console.info('Waiting for Tsar.'), $('#whiteCards').show(); }).fail(function (d, b, c) { console.error('An error occurred calling api.'), console.error(b), console.error(c), enableButton(a, submitCards); }), console.info('Exiting submitCards'); } function waitForAllPlayedCards() { console.info('Entering waitForAllPlayedCards'), getPlayedCards(function (b) { var a = new Array(); var c = 0; for (var e in b) { var f = b[e]; var d = f.PlayerHandId; $.inArray(d, a) == -1 && (a[c] = d, c++); } !self.alreadyGotWhiteCardsThisRound && $.inArray(self.playerDetails.Id, a) == -1 && getWhiteCards(), $.inArray(self.playerDetails.Id, a) != -1 && $('#whiteCards').hide(), renderPlayedCards(b), a.length != self.otherPlayers.length - 1 ? (console.info('Waiting for other players to play their hands.'), setTimeout(waitForAllPlayedCards, 1000)) : (console.info('All players have played their hands'), self.playerDetails.IsTsar || waitWhileRoundIsFinished()); }), console.info('Exiting waitForAllPlayedCards'); } function getPlayedCards(a) { console.info('Entering getPlayedCards'), $.ajax({ url: '../CahAPI/GameApi.svc/cards/played', method: 'GET' }).done(function (b) { console.info('Done Fetching Played Cards'), a(b); }).fail(function (c, a, b) { console.error('An error occurred calling api.'), console.error(a), console.error(b); }), console.info('Exiting getPlayedCards'); } function getPlayerById(c) { console.info('Entering getPlayerById'); for (var b in self.otherPlayers) { var a = self.otherPlayers[b]; if (a.Id == c) return console.info('Exiting getPlayerById'), a; } return console.info('Exiting getPlayerById'), undefined; } function renderPlayedCards(g) { console.info('Entering renderPlayedCards'); var c = $('#playedCards'); c.find('div').remove(); var e; var a; var d; for (var h in g) { var b = g[h]; e != b.PlayerHandId && (e = b.PlayerHandId, a != undefined && (a.append(d), c.append(a)), d = $('<div></div>').addClass('whiteCards'), a = $('<div></div>').attr('id', e)); var f = $('<div></div>').addClass('whiteCard').html(b.Text).attr('tag', b.Id); self.playerDetails.IsTsar && f.click(selectWinner), d.append(f); } a != undefined && (a.append(d), c.append(a)), console.info('Exiting renderPlayedCards'); } function selectWinner(a) { console.info('Entering selectWinner'), drawBlackCard(function () { var b = { tsar: self.playerDetails.Id, winner: a.target.getAttribute('tag') }; $.ajax({ url: '../CahAPI/GameApi.svc/round/selectWinner', method: 'POST', contentType: 'application/json; charset=UTF-8; charset-uf8', data: JSON.stringify(b) }).done(function (a) { console.info('Winner selected.'), getTsar(function () { updateScoreboard(waitUntilAllPlayersJoin, !1); }); }).fail(function (c, a, b) { console.error('An error occurred calling api.'), console.error(a), console.error(b); }); }), console.info('Exiting selectWinner'); } function getTsar(a) { console.info('Entering getTsar'), $.ajax({ url: '../CahAPI/GameApi.svc/player/tsar', method: 'GET' }).done(function (b) { console.info('Got Tsar.'), self.playerDetails.IsTsar = b.Id == self.playerDetails.Id, a != undefined && a(); }).fail(function (c, a, b) { console.error('An error occurred calling api.'), console.error(a), console.error(b); }), console.info('Exiting getTsar'); } function waitWhileRoundIsFinished() { console.info('Entering waitWhileRoundIsFinished'), $.ajax({ url: '../CahAPI/GameApi.svc/round/isFinished', method: 'GET' }).done(function (a) { a ? (console.info('Rounds is finished, getting new cards.'), self.alreadyGotWhiteCardsThisRound = !1, getBlackCard(), getTsar(function () { updateScoreboard(waitUntilAllPlayersJoin, !1); })) : setTimeout(waitWhileRoundIsFinished, 2000); }).fail(function (c, a, b) { console.error('An error occurred calling api.'), console.error(a), console.error(b); }), console.info('Exiting waitWhileRoundIsFinished'); } var playerDetails; var pick = 0; var cardsPicked = 0; var selectedCards = new Array(); var otherPlayers; var alreadyGotWhiteCardsThisRound = !1; $(document).ready(function () { console.info('Initialising...'), $('#blackCard').hide(), $('#whiteCards').hide(), $('#addNewPlayer').hide(), $('#scoreboard').hide(), $('#tsar').hide(), $('#submitCards').hide(), $('.whiteCard').click(whiteCardClicked), $('body').show(), wouldYouStartTheFansPlease(); });